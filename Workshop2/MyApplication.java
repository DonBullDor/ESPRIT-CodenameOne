package com.mycompany.myapp;

import com.codename1.components.ImageViewer;
import com.codename1.components.OnOffSwitch;
import com.codename1.components.SpanLabel;
import static com.codename1.ui.CN.*;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.Label;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import com.codename1.io.Log;
import com.codename1.ui.Toolbar;
import java.io.IOException;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.io.NetworkEvent;
import com.codename1.ui.Button;
import com.codename1.ui.ComboBox;
import com.codename1.ui.Command;
import com.codename1.ui.Container;
import com.codename1.ui.Image;
import com.codename1.ui.Slider;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.util.UIBuilder;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename
 * One</a> for the purpose of building native mobile applications using Java.
 */
public class MyApplication {

    private Form current;
    private Resources theme;

    public void init(Object context) {
        // use two network threads instead of one
        updateNetworkThreadCount(2);

        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        addNetworkErrorListener(err -> {
            // prevent the event from propagating
            err.consume();
            if (err.getError() != null) {
                Log.e(err.getError());
            }
            Log.sendLogAsync();
            Dialog.show("Connection Error", "There was a networking error in the connection to " + err.getConnectionRequest().getUrl(), "OK", null);
        });
    }

    public void start() {
        if (current != null) {
            current.show();
            return;
        }
        UIBuilder ui = new UIBuilder(); //chargeur pour charger le resource forme dans un objet form

        //les registres
        UIBuilder.registerCustomComponent("ImageViewer", ImageViewer.class);
        UIBuilder.registerCustomComponent("ComboBox", ComboBox.class);

        //chargement le form
        Form f1 = ui.createContainer(theme, "GUI 1").getComponentForm();

        Form f2 = ui.createContainer(theme, "profil").getComponentForm();

        ComboBox teachers = (ComboBox) ui.findByName("comboteach", f1);
        ImageViewer image = (ImageViewer) ui.findByName("Imageteach", f2);
        Label note = (Label) ui.findByName("note", f2);
        Slider sd = (Slider) ui.findByName("Slider", f2);
        Button btn = (Button) ui.findByName("Button", f2);

        teachers.addActionListener(evt
                -> {
            String selected = teachers.getSelectedItem().toString();
            if (selected.equals("teacher 1")) {
                image.setImage(theme.getImage("Picture1.png"));
            } else if (selected.equals("teacher 2")) {
                image.setImage(theme.getImage("Picture2.jpg"));
            } else {
                image.setImage(theme.getImage("Picture3.png"));
            }

            f2.getToolbar().addCommandToSideMenu("Home", null, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent evt) {
                    f1.showBack();
                }
            });
            f2.show();
        });
        sd.addActionListener(evt
                -> {
            note.setText(sd.getProgress() + "");
        });
        btn.addActionListener(evt -> {
            Dialog.show("NOTE!", "Vous voullez cpnfirmer la note " + sd.getProgress(), "cancel", "ok !!");
        });
        f1.show();
    }

    public void stop() {
        current = getCurrentForm();
        if (current instanceof Dialog) {
            ((Dialog) current).dispose();
            current = getCurrentForm();
        }
    }

    public void destroy() {
    }

}
